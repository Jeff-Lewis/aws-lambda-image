#!/usr/bin/env node

var path       = require("path");
var fs         = require("fs");
var configPath = path.resolve(__dirname, "../config.json");
var projectDir = path.resolve(__dirname, "..");
var warning    = [];
var fatals     = [];
var stdout     = process.stdout;
var config;
var buffer;

var red     = '\u001b[31m';
var green   = '\u001b[32m';
var magenta = '\u001b[35m';
var yellow  = '\u001b[33m';
var reset   = '\u001b[0m';

(function() {

console.log(green + "==========================================" + reset);
console.log(green + "  AWS-Lambda-Image Configuration Checker"   + reset);
console.log(green + "==========================================" + reset);
stdout.write("\r\n");

if ( ! fs.existsSync(configPath) ) {
    stdout.write(red + "[Error] Config file not exists.\r\n" + reset);
    stdout.write(red + "Did you put a config file at " + projectDir + "/config.json?\r\n" + reset);
    return;
}

buffer = fs.readFileSync(configPath, {encoding: "utf8"});

stdout.write(magenta + "Configuration status: " + reset);
try {
    config = JSON.parse(buffer);
    stdout.write("OK\r\n");
} catch ( e ) {
    stdout.write("\r\n");
    stdout.write(red + "Error!\r\n" + reset);
    console.log(e.message);
    process.exit(1);
}

stdout.write(magenta + "JPEG optimizer:       " + reset);
var optimizer = ( config.jpegOptimizer ) ? config.jpegOptimizer : "mozjpeg";
if ( optimizer !== "jpegoptim" && optimizer !== "mozjpeg" ) {
    warning.push("[Warning] JPEG Optimizer is invalid. It accepts 'jpegoptim' or 'mozjpeg'.");
    optimizer = "mozjpeg";
}
stdout.write(optimizer + "\r\n");

var bucket = ( config.bucket ) ? config.bucket : "";
stdout.write(magenta + "Destination bucket:   " + reset);
stdout.write(( bucket ) ? bucket : "[Same bucket]");
stdout.write("\r\n");

var acl = ("acl" in config ? config.acl : "");
if ( acl ) {
    acl = config.acl;

    stdout.write(magenta + "Global S3 ACL:        " + reset + acl);
    stdout.write("\r\n");
}
stdout.write("\r\n");

stdout.write("Backup image configuration\r\n");
stdout.write("--------------------------------\r\n");
if ( "backup" in config ) {
    var backup = config.backup || {};
    validateDestination(stdout, bucket, backup.bucket, backup.directory);
    validatePrefixAndSuffix(stdout, backup.prefix, backup.suffix);
    validateAcl(stdout, acl, backup.acl);
} else {
    stdout.write("Backup option is not supplied, skip it.\r\n");
}

stdout.write("\r\n");
stdout.write("Reduce image configuration\r\n");
stdout.write("--------------------------------\r\n");
if ( "reduce" in config ) {
    var reduce = config.reduce || {};
    validateQuality(stdout, reduce.quality);
    validateOptimizer(stdout, reduce.jpegOptimizer);
    validateDestination(stdout, bucket, reduce.bucket, reduce.directory);
    validatePrefixAndSuffix(stdout, reduce.prefix, reduce.suffix);
    validateAcl(stdout, acl, reduce.acl);
} else {
    stdout.write("Reduce option is not supplied, skip it.\r\n");
}

stdout.write("\r\n");
stdout.write("Resize image configuration\r\n");
stdout.write("--------------------------------\r\n");
var resizes = config.resizes || [];
stdout.write(magenta + "    Number of resize images: " + reset + resizes.length + "\r\n");
stdout.write("\r\n");
resizes.forEach(function(resize, index) {
    stdout.write("    Resize image " + (index + 1) + " ( of " + resizes.length + " )\r\n");
    stdout.write("    --------------------------------\r\n");
    validateSize(stdout, resize.size);
    validateFormat(stdout, resize.format);
    validateQuality(stdout, resize.quality);
    validateOptimizer(stdout, resize.jpegOptimizer);
    validateDestination(stdout, bucket, resize.bucket, resize.directory);
    validatePrefixAndSuffix(stdout, resize.prefix, resize.suffix);
    validateAcl(stdout, acl, resize.acl);
    stdout.write("\r\n");
});

stdout.write("\r\n");
stdout.write(green + "Configuration check finished.\r\n" + reset);
stdout.write("\r\n");
if ( fatals.length === 0 && warning.length === 0 ) {
    stdout.write(green + "Your configuration is green!\r\n" + reset);
} else {
    new Set(fatals).forEach(function(f) {
        stdout.write(red + "[Fatal] " + f + "\r\n" + reset);
    });
    new Set(warning).forEach(function(n) {
        stdout.write(red + "[Warning] " + n + "\r\n" + reset);
    });
}
if (fatals.length !== 0) {
    process.exit(1);
}

function validateSize(stdout, size) {
    var color = reset;
    if ( ! size ) {
        fatals.push("Resize destination size must be supplied");
        color = red;
    } else if ( isNaN(parseInt(size, 10)) ) {
        fatals.push("Resize destination size must be a number");
        color = red;
    }
    stdout.write(magenta + "    Size:             " + color + size + reset);
    stdout.write("\r\n");
}

function validateQuality(stdout, quality) {
    if ( quality ) {
        var color = reset;
        if ( isNaN(parseInt(quality, 10)) || quality < 0 || quality > 100 ) {
            fatals.push("Invalid value of 'quality' option. It should be a number in range 0-100.");
            color = red;
        }
        stdout.write(magenta + "    Image Quality:    " + color + quality + " (JPG Only)" + reset);
        stdout.write("\r\n");
    }
}

function validateOptimizer(stdout, optimizer) {
    if ( optimizer ) {
        var color = reset;
        if ( ["mozjpeg", "jpegoptim"].indexOf(optimizer) === -1) {
            warning.push("Invalid value of 'jpegOptimizer' option. Should be 'mozjpeg' or 'jpegoptim'.");
            color = red;
        }
        stdout.write(magenta + "    JPEG Optimizer:   " + color + optimizer + " (JPG Only)" + reset);
        stdout.write("\r\n");
    }
}

function validateFormat(stdout, format) {
    if ( format ) {
        stdout.write(magenta + "    Convert:          " + reset + format);
        stdout.write("\r\n");
    }
}

function validateDestination(stdout, globalBucket, bucket, directory) {
    var color = reset;
    if ( ! bucket && ! globalBucket && (! directory || /^\.\//.test(directory))) {
        warning.push(" Saving image to the same or relative directory may cause infinite Lambda process loop.");
        color = red;
    }

    stdout.write( magenta + "    Save bucket:      " + color );
    stdout.write( bucket ? bucket : globalBucket ? globalBucket : "[Same bucket]" );
    stdout.write( "\r\n");
    stdout.write (magenta + "    Save directory:   " + color );
    if ( directory ) {
        stdout.write(directory);
        stdout.write( /^\.\.?/.test(directory) ? " [Relative]" : "");
    } else {
        stdout.write("[Same directory]");
    }
    stdout.write(reset + "\r\n");
}

function validatePrefixAndSuffix(stdout, prefix, suffix) {
    if ( prefix ) {
        stdout.write(magenta + "    Filename Prefix:  " + reset + prefix);
        stdout.write("\r\n");
    }
    if ( suffix ) {
        stdout.write(magenta + "    Filename Suffix:  " + reset + suffix);
        stdout.write("\r\n");
    }
}

function validateAcl(stdout, globalAcl, acl) {
    stdout.write(magenta + "    S3 ACL:           " + reset);
    stdout.write(acl ? acl : globalAcl ? "[Global ACL]" : "[Source ACL]");
    stdout.write("\r\n");
}

})();
